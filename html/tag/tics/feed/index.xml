<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>tics &#8211; Gnuplotting</title>
	<atom:link href="./index.html?simply_static_page=2092" rel="self" type="application/rss+xml" />
	<link>./../../../index.html</link>
	<description>Create scientific plots using gnuplot</description>
	<lastBuildDate>Sun, 17 Feb 2013 19:13:01 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1.1</generator>
	<item>
		<title>Why you should upgrade to Gnuplot 4.4.3</title>
		<link>./../../../why-you-should-upgrade-to-gnuplot-4-4-3/index.html</link>
					<comments>./../../../why-you-should-upgrade-to-gnuplot-4-4-3/index.html#comments</comments>
		
		<dc:creator><![CDATA[hagen]]></dc:creator>
		<pubDate>Thu, 08 Sep 2011 09:47:38 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[axes]]></category>
		<category><![CDATA[epslatex]]></category>
		<category><![CDATA[tics]]></category>
		<guid isPermaLink="false">./../../../index.html?p=1023</guid>

					<description><![CDATA[In the last entry about attractive plots we introduced the usage of gray borders and tics in order to emphasize the content of the figure. If we want to do the same in the epslatex terminal, we had to add the color of the text directly with some LaTeX code: set terminal epslatex size 10.4cm,6.35cm [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>In the <a href="./../../../attractive-plots/index.html">last entry about attractive plots</a> we introduced the usage of gray borders and tics in order to emphasize the content of the figure.<br />
If we want to do the same in the <code>epslatex</code> terminal, we had to add the color of the text directly with some LaTeX code:</p>
<pre class="prettyprint">
<span class="k">set</span> terminal epslatex size <span class="n">10.4cm</span>,<span class="n">6.35cm</span> color colortext standalone \
<span class="s">'phv,9'</span> header <span class="s">'\definecolor{tics}{rgb}{0.5,0.5,0.5}'</span>
<span class="k">set</span> format <span class="s">'\color{tics}$%g$'</span>
</pre>
<p>The problem is that the output looks not the way it should be, but like the one in Fig. 1.<br />
It appears that all the letters we have written in the format string are used for the calculation of the size of the tics.</p>
<div class="figure" style="width:420px;">
    <img decoding="async" src="./../../../figs/epslatex_old.png" alt="nice plot" width="410"/></p>
<p class="caption">
        <strong>Fig. 1 </strong>Colored tics plotted with Gnuplot version &lt;4.4.3 (<a href="./../../../code/epslatex_old.gnu" type="text/plain">code to produce this figure</a>)
    </p>
</div>
<p>An easy solution to that problem is to use <a href="http://www.gnuplot.info/announce.4.4.3">Gnuplot 4.4.3</a>, because the size calculation has been updated. Fig. 2 shows the result if we use Gnuplot 4.4.3 to create the figure. But still there is some room for improvements.</p>
<div class="figure" style="width:420px;">
    <img decoding="async" src="./../../../figs/epslatex_new.png" alt="nice plot" width="410"/></p>
<p class="caption">
        <strong>Fig. 2 </strong>Colored tics plotted with Gnuplot 4.4.3 (<a href="./../../../code/epslatex_new.gnu" type="text/plain">code to produce this figure</a>)
    </p>
</div>
<p>The length of the color name has still an influence on the calculated tics size. Hence we use only one letter for the color definition:</p>
<pre class="prettyprint">
<span class="k">set</span> terminal epslatex size <span class="n">10.4cm</span>,<span class="n">6.35cm</span> color colortext standalone \
<span class="n">'phv,9'</span> header <span class="s">'\definecolor{t}{rgb}{0.5,0.5,0.5}'</span>
<span class="k">set</span> format <span class="s">'\color{t}$%g$'</span>
</pre>
<p>The final result is shown in Fig. 3.</p>
<div class="figure" style="width:420px;">
    <img decoding="async" src="./../../../figs/epslatex_correct.png" alt="nice plot" width="410"/></p>
<p class="caption">
        <strong>Fig. 3 </strong>Colored tics plotted with Gnuplot 4.4.3 (<a href="./../../../code/epslatex_correct.gnu" type="text/plain">code to produce this figure</a>)
    </p>
</div>
]]></content:encoded>
					
					<wfw:commentRss>./../../../why-you-should-upgrade-to-gnuplot-4-4-3/feed/index.html</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>Attractive plots</title>
		<link>./../../../attractive-plots/index.html</link>
					<comments>./../../../attractive-plots/index.html#comments</comments>
		
		<dc:creator><![CDATA[hagen]]></dc:creator>
		<pubDate>Thu, 11 Aug 2011 09:36:19 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[axes]]></category>
		<category><![CDATA[dashed]]></category>
		<category><![CDATA[grid]]></category>
		<category><![CDATA[png]]></category>
		<category><![CDATA[svg]]></category>
		<category><![CDATA[terminal]]></category>
		<category><![CDATA[tics]]></category>
		<guid isPermaLink="false">./../../../index.html?p=1014</guid>

					<description><![CDATA[As you surely have noticed I don&#8217;t use the default colors and line styles from Gnuplot, but define them myself. The simple reason is that the default colors are not optimized to be very pleasant, but are simply primary colors. I just stumbled over an blog entry of Brighten Godfrey, which deals with some thoughts [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>As you surely have noticed I don&#8217;t use the default colors and line styles from Gnuplot, but define them myself. The simple reason is that the default colors are not optimized to be very pleasant, but are simply primary colors. I just stumbled over an <a href=" http://youinfinitesnake.blogspot.com/2011/02/attractive-scientific-plots-with.html">blog entry of Brighten Godfrey</a>, which deals with some thoughts on beautiful plots.<br />
He suggest to create scientific plots like the way he created his figure which I have reproduced more or less accurate in Fig. 1.</p>
<div class="figure" style="width:420px;">
    <img decoding="async" src="./../../../figs/nice_web_plot.png" alt="nice plot" width="410"/></p>
<p class="caption">
        <strong>Fig. 1 </strong>Nice plot with the pngcairo terminal (<a href="./../../../code/nice_web_plot.gnu" type="text/plain">code to produce this figure</a>, <a href="./../../../data/nice_web_plot.dat" type="text/plain">data</a>)
    </p>
</div>
<p>In Fig. 2 the default output of the <code>pngcairo</code> terminal is shown. I think the difference is quiet obvious.</p>
<div class="figure" style="width:420px;">
    <img decoding="async" src="./../../../figs/not_so_nice_plot.png" alt="not so nice plot" width="410"/></p>
<p class="caption">
        <strong>Fig. 2 </strong>Default output of the pngcairo terminal (<a href="./../../../code/not_so_nice_plot.gnu" type="text/plain">code to produce this figure</a>, <a href="./../../../data/nice_web_plot.dat" type="text/plain">data</a>)
    </p>
</div>
<p>In the following I will have a look at the things we have to do to reach Fig. 1 and why we should do this:</p>
<p>1) change the default colors to more pleasant ones and make the lines a little bit thicker</p>
<pre class="prettyprint">
<span class="k">set</span> style line <span class="n">1</span> lc rgb <span class="s">'#8b1a0e'</span> pt <span class="n">1</span> ps <span class="n">1</span> lt <span class="n">1</span> lw <span class="n">2</span> <span class="C"># --- red</span>
<span class="k">set</span> style line <span class="n">2</span> lc rgb <span class="s">'#5e9c36'</span> pt <span class="n">6</span> ps <span class="n">1</span> lt <span class="n">1</span> lw <span class="n">2</span> <span class="C"># --- green</span>
</pre>
<p>2) put the border more to the background by applying it only on the left and bottom part and put it and the tics in gray</p>
<pre class="prettyprint">
<span class="k">set</span> style line <span class="n">11</span> lc rgb <span class="s">'#808080'</span> lt <span class="n">1</span>
<span class="k">set</span> border <span class="n">3</span> back ls <span class="n">11</span>
<span class="k">set</span> tics nomirror
</pre>
<p>3) add a slight grid to make it easier to follow the exact position of the curves</p>
<pre class="prettyprint">
<span class="k">set</span> style line <span class="n">12</span> lc rgb <span class="s">'#808080'</span> lt <span class="n">0</span> lw <span class="n">1</span>
<span class="k">set</span> grid back ls <span class="n">12</span>
</pre>
<p>The last thing I would like to mention is the problem, that the output of the <code>svg</code> terminal is slightly different from the <code>pngcairo</code> terminal. Especially the dashed line of the grid is not created in the right way,  even though the <code>dashed</code> option is used for the terminal. This and a solution to convert the lines to dashed versions is also mentioned in the <a href="./../../../plotting-the-world/index.html">plotting the world entry</a>. </p>
<div class="figure" style="width:420px;">
    <object data="./../../../figs/nice_web_plot_svg.svg" type="image/svg+xml" style="width:410px; height:250px;"><img decoding="async" src="./../../../figs/nice_web_plot_svg.png" alt="nice plot with svg terminal" width="410"/></object></p>
<p class="caption">
        <strong>Fig. 1 </strong>Nice plot with the svg terminal (<a href="./../../../code/nice_web_plot.gnu" type="text/plain">code to produce this figure</a>, <a href="./../../../data/nice_web_plot.dat" type="text/plain">data</a>)
    </p>
</div>
]]></content:encoded>
					
					<wfw:commentRss>./../../../attractive-plots/feed/index.html</wfw:commentRss>
			<slash:comments>6</slash:comments>
		
		
			</item>
		<item>
		<title>Drawing a loudspeaker</title>
		<link>./../../../drawing-a-loudspeaker/index.html</link>
					<comments>./../../../drawing-a-loudspeaker/index.html#respond</comments>
		
		<dc:creator><![CDATA[hagen]]></dc:creator>
		<pubDate>Tue, 15 Mar 2011 08:13:49 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[border]]></category>
		<category><![CDATA[object]]></category>
		<category><![CDATA[parametric]]></category>
		<category><![CDATA[polygon]]></category>
		<category><![CDATA[tics]]></category>
		<guid isPermaLink="false">./../../../index.html?p=771</guid>

					<description><![CDATA[As you all know Gnuplot is able to add arrows or labels to your plot. But it can even add more complicated objects, by using the object command. You can choose if you want to add a rectangle, ellipse, circle, or polygon. Here we want to add a loudspeaker to our plot, hence we choose [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>As you all know Gnuplot is able to add arrows or labels to your plot. But it can even add more complicated objects, by using the <code>object</code> command. You can choose if you want to add a rectangle, ellipse, circle, or polygon. Here we want to add a loudspeaker to our plot, hence we choose the polygon.</p>
<div class="figure">
    <object data="./../../../figs/loudspeaker.svg" type="image/svg+xml"><img decoding="async" src="./../../../figs/loudspeaker.png" alt="loudspeaker" width="350"/></object></p>
<p class="caption">
        <strong>Fig. 1 </strong>A loudspeaker drawn with the object command (<a href="./../../../code/loudspeaker.gnu" type="text/plain">code to produce this figure</a>)
    </p>
</div>
<p>For a polygon you have to specify the points the polygon should combine. The following points will result in a shape of the desired loudspeaker.</p>
<pre class="prettyprint">
<span class="c">a</span> <span class="o">=</span> <span class="n">1.0</span><span class="o">/</span><span class="n">3</span>
<span class="k">set</span> object <span class="n">1</span> polygon from \
    <span class="n">-1</span>, <span class="n">1</span> to \
     <span class="n">0</span>, <span class="n">1</span> to \
     <span class="n">0</span>, <span class="c">a</span> to \
     <span class="n">1</span>, <span class="n">1</span> to \
     <span class="n">1</span>,<span class="n">-1</span> to \
     <span class="n">0</span>,<span class="c">-a</span> to \
     <span class="n">0</span>,<span class="n">-1</span> to \
    <span class="n">-1</span>,<span class="n">-1</span> to \
    <span class="n">-1</span>, <span class="n">1</span>
</pre>
<p>After this we do some fine tuning on the appearance of the object and remove all borders and tics from the plot.</p>
<pre class="prettyprint">
<span class="k">unset</span> border
<span class="k">unset</span> tics
<span class="k">set</span> object <span class="n">1</span> fc rgb <span class="s">'#000000'</span> fillstyle solid lw <span class="n">0</span>
</pre>
<p>In order to draw the loudspeaker we need a plot command. For this we use the parametric mode to draw parts of circles with different radii. Here I will only present the used functions, for an explanation of the parametric mode have a look at the <a href="./../../../understand-parametric-plotting/index.html">Understand parametric mode</a> entry.</p>
<pre class="prettyprint">
<span class="k">set</span> trange [<span class="c">-pi</span><span class="o">/</span><span class="n">6</span>:<span class="c">pi</span><span class="o">/</span><span class="n">6</span>]
<span class="f">fx</span>(<span class="v">t</span>,<span class="v">r</span>) <span class="o">=</span> <span class="v">r</span><span class="o">*</span><span class="f">cos</span>(<span class="v">t</span>)
<span class="f">fy</span>(<span class="v">t</span>,<span class="v">r</span>) <span class="o">=</span> <span class="v">r</span><span class="o">*</span><span class="f">sin</span>(<span class="v">t</span>)
</pre>
]]></content:encoded>
					
					<wfw:commentRss>./../../../drawing-a-loudspeaker/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Multiplot &#8211; placing graphs next to each other</title>
		<link>./../../../multiplot-placing-graphs-next-to-each-other/index.html</link>
					<comments>./../../../multiplot-placing-graphs-next-to-each-other/index.html#comments</comments>
		
		<dc:creator><![CDATA[hagen]]></dc:creator>
		<pubDate>Wed, 27 Oct 2010 09:36:00 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[functions]]></category>
		<category><![CDATA[label]]></category>
		<category><![CDATA[macros]]></category>
		<category><![CDATA[margin]]></category>
		<category><![CDATA[multiplot]]></category>
		<category><![CDATA[tics]]></category>
		<guid isPermaLink="false">http://gnuplot.kkdu.org/?p=144</guid>

					<description><![CDATA[If we have more than one graph that should be displayed in a figure, the multiplot command is the one to use in Gnuplot. But as we will see this is not a trivial task. Let us consider we have four different functions that should be presented in the same figure as shown in Fig. [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>If we have more than one graph that should be displayed in a figure, the <code>multiplot</code> command is the one to use in Gnuplot. But as we will see this is not a trivial task.<br />
Let us consider we have four different functions that should be presented in the same figure as shown in Fig. 1.</p>
<div class="figure">
        <img decoding="async" src="./../../../figs/multiplot3.png" alt="nice multiplot" width="350"/></p>
<p class="caption">
        <strong>Fig. 1 </strong>A multiplot with reduced axes labeling and nicely arranged graphs (<a href="./../../../code/multiplot3.gnu" type="text/plain">code to produce this figure</a>)
    </p>
</div>
<p>The functions are given by:</p>
<pre class="prettyprint">
<span class="C"># Functions (1/0 means not defined)</span>
<span class="c">a</span> <span class="o">=</span> <span class="n">0.9</span>
<span class="f">f</span>(<span class="v">x</span>) <span class="o">=</span> <span class="f">abs</span>(<span class="v">x</span>)<span class="o">&lt;</span><span class="n">2</span><span class="o">*</span><span class="c">pi</span> <span class="o">?</span> <span class="c">a</span><span class="o">*</span><span class="f">sin</span>(<span class="v">x</span>)           <span class="o">:</span> <span class="n">1</span><span class="o">/</span><span class="n">0</span>
<span class="f">g</span>(<span class="v">x</span>) <span class="o">=</span> <span class="f">abs</span>(<span class="v">x</span>)<span class="o">&lt;</span><span class="n">2</span><span class="o">*</span><span class="c">pi</span> <span class="o">?</span> <span class="c">a</span><span class="o">*</span><span class="f">sin</span>(<span class="v">x</span><span class="o">+</span><span class="c">pi</span><span class="o">/</span><span class="n">2</span>)      <span class="o">:</span> <span class="n">1</span><span class="o">/</span><span class="n">0</span>
<span class="f">h</span>(<span class="v">x</span>) <span class="o">=</span> <span class="f">abs</span>(<span class="v">x</span>)<span class="o">&lt;</span><span class="n">2</span><span class="o">*</span><span class="c">pi</span> <span class="o">?</span> <span class="c">a</span><span class="o">*</span><span class="f">sin</span>(<span class="v">x</span><span class="o">+</span><span class="c">pi</span>)        <span class="o">:</span> <span class="n">1</span><span class="o">/</span><span class="n">0</span>
<span class="f">k</span>(<span class="v">x</span>) <span class="o">=</span> <span class="f">abs</span>(<span class="v">x</span>)<span class="o">&lt;</span><span class="n">2</span><span class="o">*</span><span class="c">pi</span> <span class="o">?</span> <span class="c">a</span><span class="o">*</span><span class="f">sin</span>(<span class="v">x</span><span class="o">+</span><span class="n">3.0</span><span class="o">/</span><span class="n">2</span><span class="o">*</span><span class="c">pi</span>)  <span class="o">:</span> <span class="n">1</span><span class="o">/</span><span class="n">0</span>
</pre>
<p>For an explanation of the used syntax to declare the functions have a look at the <a href="./../../../defining-piecewise-functions/index.html">Defining piecewise functions</a> article.</p>
<p>In a first attempt we just use the <code>multiplot</code> command:</p>
<pre class="prettyprint">
<span class="C">### Start multiplot (2x2 layout)</span>
<span class="k">set</span> multiplot layout <span class="n">2</span>,<span class="n">2</span> rowsfirst
<span class="C"># --- GRAPH a</span>
<span class="k">set</span> label <span class="n">1</span> <span class="s">'a'</span> at graph <span class="n">0.92</span>,<span class="n">0.9</span> font <span class="s">',8'</span>
<span class="k">plot</span> <span class="f">f</span>(<span class="v">x</span>) with lines ls <span class="n">1</span>
<span class="C"># --- GRAPH b</span>
<span class="k">set</span> label <span class="n">1</span> <span class="s">'b'</span> at graph <span class="n">0.92</span>,<span class="n">0.9</span> font <span class="s">',8'</span>
<span class="k">plot</span> <span class="f">g</span>(<span class="v">x</span>) with lines ls <span class="n">1</span>
<span class="C"># --- GRAPH c</span>
<span class="k">set</span> label <span class="n">1</span> <span class="s">'c'</span> at graph <span class="n">0.92</span>,<span class="n">0.9</span> font <span class="s">',8'</span>
<span class="k">plot</span> <span class="f">h</span>(<span class="v">x</span>) with lines ls <span class="n">1</span>
<span class="C"># --- GRAPH d</span>
<span class="k">set</span> label <span class="n">1</span> <span class="s">'d'</span> at graph <span class="n">0.92</span>,<span class="n">0.9</span> font <span class="s">',8'</span>
<span class="k">plot</span> <span class="f">k</span>(<span class="v">x</span>) with lines ls <span class="n">1</span>
<span class="k">unset</span> multiplot
<span class="C">### End multiplot</span>
</pre>
<p>We also added a label to every graph in order to identify them easily in the figure. Note that we overwrite the label 1 for every graph. If we don&#8217;t do that, then on the last graph all four labels will be present. Using this simple approach we will get Fig. 2. As you can see this is not an ideal case to use the space in the figure. The xtics and the ytics are just the same in every graph and are not needed to be displayed on every graph.</p>
<div class="figure">
        <img decoding="async" src="./../../../figs/multiplot1.png" alt="simple multiplot" width="350"/></p>
<p class="caption">
        <strong>Fig. 2 </strong>A straightforward use of the multiplot command to plot four different functions (<a href="./../../../code/multiplot1.gnu" type="text/plain">code to produce this figure</a>)
    </p>
</div>
<p>But before we fix this we will introduce the use of macros in order to shorten the code a lot. As you can see in the code block above, the set label command contains the same position for every graph. We can shorten this by:</p>
<pre class="prettyprint">
<span class="k">set</span> macros
<span class="C"># Placement of the a,b,c,d labels in the graphs</span>
<span class="v">POS</span> <span class="o">=</span> <span class="s">"at graph 0.92,0.9 font ',8'"</span>
[...]
<span class="k">set</span> label <span class="n">1</span> <span class="s">'a'</span> <span class="v">@POS</span>
<span class="k">plot</span> <span class="f">f</span>(<span class="v">x</span>) with lines ls <span class="n">1</span>
</pre>
<p>and so on for the other graphs.</p>
<p>But the macros are not only useful for the different labels, but also for the other settings of the multiplot.<br />
First we want to remove the x/y-tics and labels, where they are not necessary. Here it is the same as with the label settings. Every graph uses the settings from the graph before, if we didn&#8217;t change these settings. In order to remove the xtics at a given graph we have to tell this explicitly. Therefore we define macros for the two cases label+tics vs. nolabel+notics:</p>
<pre class="prettyprint">
<span class="C"># x- and ytics for each row resp. column</span>
<span class="v">NOXTICS</span> <span class="o">=</span> <span class="s">"set xtics ('' -2*pi,'' -pi,'' 0,'' pi,'' 2*pi); \
          unset xlabel"</span>
<span class="v">XTICS</span> <span class="o">=</span> <span class="s">"set xtics ('-2&pi;' -2*pi,'-&pi;' -pi,'0' 0,'&pi;' pi,'2&pi;' 2*pi);\
          set xlabel 'x'"</span>
<span class="v">NOYTICS</span> <span class="o">=</span> <span class="s">"set format y ''; unset ylabel"</span>
<span class="v">YTICS</span> <span class="o">=</span> <span class="s">"set format y '%.0f'; set ylabel 'y'"</span>
</pre>
<p>These will then be used in the plotting section:</p>
<pre class="prettyprint">
<span class="C"># --- GRAPH a</span>
<span class="v">@NOXTICS</span>; <span class="v">@YTICS</span>
[...]
<span class="C"># --- GRAPH b</span>
<span class="v">@NOXTICS</span>; <span class="v">@NOYTICS</span>
[...]
<span class="C"># --- GRAPH c</span>
<span class="v">@XTICS</span>; <span class="v">@YTICS</span>
[...]
<span class="C"># --- GRAPH d</span>
<span class="v">@XTICS</span>; <span class="v">@NOYTICS</span>
</pre>
<p>Applying the axes settings will result in Fig. 3. </p>
<div class="figure">
        <img decoding="async" src="./../../../figs/multiplot2.png" alt="multiplot" width="350"/></p>
<p class="caption">
        <strong>Fig. 3 </strong>A multiplot with reduced axes labeling (<a href="./../../../code/multiplot2.gnu" type="text/plain">code to produce this figure</a>)
    </p>
</div>
<p>Now the label etc. on the axes are done in a nice way, but the sizes and the spaces between the individual graphs are very bad. This comes from the fact that Gnuplot calculates the size of a graph depending on the presence of tics and labels. In order to have graphs with the same size and align them without spaces between them we have to set the margins of the individual graphs manually. </p>
<pre class="prettyprint">
<span class="C"># Margins for each row resp. column</span>
<span class="v">TMARGIN</span> <span class="o">=</span> <span class="s">"set tmargin at screen 0.90; set bmargin at screen 0.55"</span>
<span class="v">BMARGIN</span> <span class="o">=</span> <span class="s">"set tmargin at screen 0.55; set bmargin at screen 0.20"</span>
<span class="v">LMARGIN</span> <span class="o">=</span> <span class="s">"set lmargin at screen 0.15; set rmargin at screen 0.55"</span>
<span class="v">RMARGIN</span> <span class="o">=</span> <span class="s">"set lmargin at screen 0.55; set rmargin at screen 0.95"</span>
</pre>
<p>The trick is that we use the <code>at screen</code> command to arrange the margins absolutely in the figure. As you can see the bottom margin of the two figures in the top is placed at <code>0.55</code>, the same value the top margin of the two lower graphs start.<br />
These margins are then added in the same way to the multiplot command as the label settings and we get:</p>
<pre class="prettyprint">
<span class="C"># --- GRAPH a</span>
<span class="v">@TMARGIN</span>; <span class="v">@LMARGIN</span>
[...]
<span class="C"># --- GRAPH b</span>
<span class="v">@TMARGIN</span>; <span class="v">@RMARGIN</span>
[...]
<span class="C"># --- GRAPH c</span>
<span class="v">@BMARGIN</span>; <span class="v">@LMARGIN</span>
[...]
<span class="C"># --- GRAPH d</span>
<span class="v">@BMARGIN</span>; <span class="v">@RMARGIN</span>
</pre>
<p>Having done all this we will finally get our desired figure which is shown in Fig. 1.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../multiplot-placing-graphs-next-to-each-other/feed/index.html</wfw:commentRss>
			<slash:comments>11</slash:comments>
		
		
			</item>
		<item>
		<title>Set your tic labels to use &#960; or to be blank</title>
		<link>./../../../set-your-tic-labels-to-use-pi-or-to-be-blank/index.html</link>
					<comments>./../../../set-your-tic-labels-to-use-pi-or-to-be-blank/index.html#comments</comments>
		
		<dc:creator><![CDATA[hagen]]></dc:creator>
		<pubDate>Tue, 27 Jul 2010 15:54:53 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[axes]]></category>
		<category><![CDATA[format]]></category>
		<category><![CDATA[tics]]></category>
		<guid isPermaLink="false">http://gnuplot.kkdu.org/?p=136</guid>

					<description><![CDATA[In the introduction I have set the xtics labels manually to use a multiple of &#960;: set xtics ('-2&#960;' -2*pi, '-&#960;' -pi, 0, '&#960;' pi, '2&#960;' 2*pi) But there is an easier way to achieve the same. First we tell Gnuplot to place the tics at multiplies of &#960;. And then the trick: with the [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>In the <a href="./../../../introduction/plotting-functions/index.html">introduction</a> I have set the xtics labels manually to use a multiple of &pi;:</p>
<pre class="prettyprint">
<span class="k">set</span> xtics (<span class="s">'-2&pi;'</span> <span class="n">-2</span><span class="o">*</span><span class="c">pi</span>, <span class="s">'-&pi;'</span> <span class="c">-pi</span>, <span class="n">0</span>, <span class="s">'&pi;'</span> <span class="c">pi</span>, <span class="s">'2&pi;'</span> <span class="n">2</span><span class="o">*</span><span class="c">pi</span>)
</pre>
<p>But there is an easier way to achieve the same. First we tell Gnuplot to place the tics at multiplies of &pi;. And then the trick: with the <code>set format</code> option we can tell Gnuplot to use multiple of &pi; too:</p>
<pre class="prettyprint">
<span class="k">set</span> xtics <span class="c">pi</span>
<span class="k">set</span> format <span class="v">x</span> <span class="s">'</span><span class="ss">%.0P</span><span class="s">&pi;'</span>
</pre>
<p>In the same way we can place tics without any label by applying:</p>
<pre class="prettyprint">
<span class="k">set</span> format <span class="v">x</span> <span class="s">''</span>
</pre>
]]></content:encoded>
					
					<wfw:commentRss>./../../../set-your-tic-labels-to-use-pi-or-to-be-blank/feed/index.html</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
	</channel>
</rss>
