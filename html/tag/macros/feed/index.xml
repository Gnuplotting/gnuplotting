<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>macros &#8211; Gnuplotting</title>
	<atom:link href="./index.html?simply_static_page=2001" rel="self" type="application/rss+xml" />
	<link>./../../../index.html</link>
	<description>Create scientific plots using gnuplot</description>
	<lastBuildDate>Mon, 02 Jan 2023 18:38:22 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1.1</generator>
	<item>
		<title>Calculating histograms</title>
		<link>./../../../calculating-histograms/index.html</link>
					<comments>./../../../calculating-histograms/index.html#comments</comments>
		
		<dc:creator><![CDATA[hagen]]></dc:creator>
		<pubDate>Wed, 16 Apr 2014 09:59:48 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[boxes]]></category>
		<category><![CDATA[histogram]]></category>
		<category><![CDATA[index]]></category>
		<category><![CDATA[load]]></category>
		<category><![CDATA[macros]]></category>
		<guid isPermaLink="false">./../../../index.html?p=1924</guid>

					<description><![CDATA[Gnuplot comes with the possibility of plotting histograms, but this requires that the data in the individual bins was already calculated. Here, we start with an one dimensional set of data that we want to count and plot as an histogram, similar to the hist() function we find in Octave. Fig. 1 Two different distributions [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Gnuplot comes with the possibility of <a href="./../../../manpage-gnuplot-4-6/index.html#Q1-1-147">plotting histograms</a>, but this requires that the data in the individual bins was already calculated. Here, we start with an one dimensional set of data that we want to count and plot as an histogram, similar to the <code>hist()</code> function we find in Octave.</p>
<div class="figure">
    <img decoding="async" src="./../../../figs/histogram1.png" alt="Histogram of angle data"/></p>
<p class="caption">
        <strong>Fig. 1 </strong> Two different distributions of measured angles. (<a href="./../../../code/histogram1.gnu" type="text/plain" rel="nofollow">code to produce this figure</a>, <a href="./../../../code/hist.fct" rel="nofollow">hist.fct</a>, <a href="./../../../data/histogram.txt" rel="nofollow">data</a>)
    </p>
</div>
<p>In Fig. 1 you see two different distributions of measured angles. They were both given as one dimensional data and plotted with a defined macro that is doing the histogram calculation. The macro is defined in an additional file <code>hist.fct</code> and loaded before the plotting command.</p>
<pre class="prettyprint">
binwidth = 4
binstart = -100
load 'hist.fct'
plot 'histogram.txt' i 0 @hist ls 1,\
     ''              i 1 @hist ls 2
</pre>
<p>The content of <code>hist.fct</code>, including the definition of <code>@hist</code> looks like this</p>
<pre class="prettyprint">
# set width of single bins in histogram
set boxwidth 0.9*binwidth
# set fill style of bins
set style fill solid 0.5
# define macro for plotting the histogram
hist = 'u (binwidth*(floor(($1-binstart)/binwidth)+0.5)+binstart):(1.0) smooth freq w boxes'
</pre>
<p>For a detailed discussion on why <code>@hist</code> calculates a histogram you should have a look at <a href="http://stackoverflow.com/questions/2471884/histogram-using-gnuplot">this discussion</a> and the documentation about the <a href="./../../../manpage-gnuplot-4-6/index.html#Q1-1-300" class="manpage">smooth freq</a> which basically counts points with the same x-value. The other settings in the file define the width of a single bin plotted as a box and its fill style.</p>
<div class="figure">
    <img decoding="async" src="./../../../figs/histogram2.png" alt="Histogram of angle data"/></p>
<p class="caption">
        <strong>Fig. 2 </strong> Two different distributions of measured angles. The bins of the histograms are shifted to be centered around 0°. (<a href="./../../../code/histogram2.gnu" type="text/plain" rel="nofollow">code to produce this figure</a>, <a href="./../../../code/hist.fct" rel="nofollow">hist.fct</a>, <a href="./../../../data/histogram.txt" rel="nofollow">data</a>)
    </p>
</div>
<p>It is important that the two values <code>binwidth</code> and <code>binstart</code> are defined before loading the <code>hist.fct</code> file. These define the width of the single bins and at what position the left border of a single bin should be positioned. For example, let us assume that we want to have the bins centered around 0° as shown in Fig. 2. This can be achieved by settings the binstart to half the binwidth:</p>
<pre class="prettyprint">
binwidth = 4
binstart = -2
load 'hist.fct'
plot 'histogram.txt' i 0 @hist ls 1,\
     ''              i 1 @hist ls 2
</pre>
]]></content:encoded>
					
					<wfw:commentRss>./../../../calculating-histograms/feed/index.html</wfw:commentRss>
			<slash:comments>17</slash:comments>
		
		
			</item>
		<item>
		<title>Matlab colorbar with Gnuplot</title>
		<link>./../../../matlab-colorbar-with-gnuplot/index.html</link>
					<comments>./../../../matlab-colorbar-with-gnuplot/index.html#comments</comments>
		
		<dc:creator><![CDATA[hagen]]></dc:creator>
		<pubDate>Thu, 05 Jan 2012 15:03:18 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[colormap]]></category>
		<category><![CDATA[macros]]></category>
		<category><![CDATA[Matlab]]></category>
		<category><![CDATA[palette]]></category>
		<category><![CDATA[rgb]]></category>
		<guid isPermaLink="false">./../../../index.html?p=1266</guid>

					<description><![CDATA[This time another colormap plot. If you are using Matlab or Octave you are probably be familiar with Matlabs nice default colormap jet. Fig. 1 Photoluminescence yield plotted with the jet colormap from Matlab (code to produce this figure, data) In Fig.1, you see a photoluminescence yield in a given region, and as you can [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>This time another <a href="./../../../color-maps-and-the-scale-of-axes/index.html">colormap plot</a>. If you are using Matlab or Octave you are probably be familiar with Matlabs nice default <a href="http://www.mathworks.de/help/techdoc/ref/colormap.html">colormap jet</a>.</p>
<div class="figure">
    <img decoding="async" src="./../../../figs/matlab_colormap.png" alt="Matlab colorbar"/></p>
<p class="caption">
        <strong>Fig. 1 </strong>Photoluminescence yield plotted with the jet colormap from Matlab (<a href="./../../../code/matlab_colormap.gnu" type="text/plain">code to produce this figure</a>, <a href="./../../../data/matlab_colormap.txt">data</a>)
    </p>
</div>
<p>In Fig.1, you see a photoluminescence yield in a given region, and as you can see Gnuplot is able to apply the jet colormap from Matlab. This can be achieved by defining the palette as follows.</p>
<pre class="prettyprint">
set palette defined ( 0 '#000090',\
                      1 '#000fff',\
                      2 '#0090ff',\
                      3 '#0fffee',\
                      4 '#90ff70',\
                      5 '#ffee00',\
                      6 '#ff7000',\
                      7 '#ee0000',\
                      8 '#7f0000')
</pre>
<p>The numbers <code>0..8</code> are automatically rescaled to <code>0..1</code>, which means you can employ arbitrary numbers here, only their difference counts.</p>
<p>If you want to use this colormap regularly, you can store it in the <a href="./../../../configuration/index.html">Gnuplot config file</a> as a macro.</p>
<pre class="prettyprint">
# ~/.gnuplot
set macros
MATLAB = "defined (0  0.0 0.0 0.5, \
                   1  0.0 0.0 1.0, \
                   2  0.0 0.5 1.0, \
                   3  0.0 1.0 1.0, \
                   4  0.5 1.0 0.5, \
                   5  1.0 1.0 0.0, \
                   6  1.0 0.5 0.0, \
                   7  1.0 0.0 0.0, \
                   8  0.5 0.0 0.0 )"
</pre>
<p>Here we defined the colors directly as rgb values in the range of <code>0..1</code>, which can be alternatively used a color definition.<br />
In order to apply the colormap, we now can simple write</p>
<pre class="prettyprint">
set palette @MATLAB
</pre>
]]></content:encoded>
					
					<wfw:commentRss>./../../../matlab-colorbar-with-gnuplot/feed/index.html</wfw:commentRss>
			<slash:comments>16</slash:comments>
		
		
			</item>
		<item>
		<title>Configuration</title>
		<link>./../../../configuration/index.html</link>
					<comments>./../../../configuration/index.html#comments</comments>
		
		<dc:creator><![CDATA[hagen]]></dc:creator>
		<pubDate>Tue, 19 Apr 2011 09:23:02 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[configuration]]></category>
		<category><![CDATA[macros]]></category>
		<category><![CDATA[style]]></category>
		<guid isPermaLink="false">http://gnuplot.kkdu.org/?p=130</guid>

					<description><![CDATA[Often we use a specific line color or output terminal in Gnuplot. Or we are not satisfied with one of the default settings, for example the font used by the png terminal. There exists an easy way to fix these settings. Gnuplot reads a startup file, called .gnuplot under Linux and GNUPLOT.INI under Windows. First [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Often we use a specific line color or output terminal in Gnuplot. Or we are not satisfied with one of the default settings, for example the font used by the png terminal. There exists an easy way to fix these settings. Gnuplot reads a startup file, called <code>.gnuplot</code> under Linux and <code>GNUPLOT.INI</code> under Windows. First it searches the current directory and then your home directory after that file.</p>
<p>Here is an example of what is possible to include in the startup file.</p>
<pre class="prettyprint">
<span class="C"># enable macros</span>
<span class="k">set</span> macros
<span class="C"># search for functions or data files in these directories</span>
<span class="k">set</span> loadpath <span class="v">'/usr/local/lib/gnuplot'</span>
<span class="C"># add default line colors</span>
<span class="k">set</span> style line <span class="n">1</span> lc rgb <span class="s">'#0060ad'</span> lt <span class="n">1</span> lw <span class="n">2</span> pt <span class="n">5</span>   <span class="C"># blue</span>
<span class="k">set</span> style line <span class="n">2</span> lc rgb <span class="s">'#dd181f'</span> lt <span class="n">1</span> lw <span class="n">2</span> pt <span class="n">7</span>   <span class="C"># red</span>
<span class="C"># add macros to select the desired line style</span>
<span class="v">BLUE</span> <span class="o">=</span> <span class="s">"1"</span>
<span class="v">RED</span> <span class="o">=</span> <span class="s">"2"</span>
<span class="C"># add macros to select a desired terminal</span>
<span class="v">WXT</span> <span class="o">=</span> <span class="s">"set terminal wxt size 350,262 enhanced font 'Verdana,10' \
   persist"</span>
<span class="v">PNG</span> <span class="o">=</span> <span class="s">"set terminal pngcairo size 350,262 enhanced font 'Verdana,10'"</span>
<span class="v">SVG</span> <span class="o">=</span> <span class="s">"set terminal svg size 350,262 fname \
   'Verdana, Helvetica, Arial, sans-serif' fsize = 10"</span>
</pre>
<p>With these settings and the use of macros our plotting will become more easier. For example to plot the sinusoid from the <a href="./../../../introduction/plotting-functions/index.html">plotting functions</a> introduction we can now use the following code.</p>
<pre class="prettyprint">
<span class="v">@WXT</span>
[...]
<span class="k">plot</span> <span class="f">f</span>(<span class="v">x</span>) title <span class="s">'sin(x)'</span> with lines ls <span class="v">@BLUE</span>, \
     <span class="f">g</span>(<span class="v">x</span>) notitle with lines ls <span class="v">@RED</span>
</pre>
<p>Note that you have to omit the usage of <code>reset</code> in your code, because it will clear the line style settings.</p>
<div class="figure">
    <object data="./../../../figs/configuration1.svg" type="image/svg+xml"><img decoding="async" src="./../../../figs/configuration1.png" alt="Sinusoid" width="350"/></object></p>
<p class="caption">
        <strong>Fig. 1 </strong>Plotting using the configuration file (<a href="./../../../code/configuration1.gnu" type="text/plain">code to produce this figure</a>)
    </p>
</div>
<p>You can of course override the style settings of the configuration file.</p>
<pre class="prettyprint">
<span class="k">plot</span> <span class="f">f</span>(<span class="v">x</span>) title <span class="s">'sin(x)'</span> with lines ls <span class="v">@BLUE</span>, \
     <span class="f">g</span>(<span class="v">x</span>) notitle with lines ls <span class="v">@RED</span> lw <span class="n">1</span>
</pre>
<div class="figure">
    <object data="./../../../figs/configuration2.svg" type="image/svg+xml"><img decoding="async" src="./../../../figs/configuration2.png" alt="Sinusoid" width="350"/></object></p>
<p class="caption">
        <strong>Fig. 1 </strong>Overwriting settings from the configuration file (<a href="./../../../code/configuration2.gnu" type="text/plain">code to produce this figure</a>)
    </p>
</div>
]]></content:encoded>
					
					<wfw:commentRss>./../../../configuration/feed/index.html</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>Multiplot &#8211; placing graphs next to each other</title>
		<link>./../../../multiplot-placing-graphs-next-to-each-other/index.html</link>
					<comments>./../../../multiplot-placing-graphs-next-to-each-other/index.html#comments</comments>
		
		<dc:creator><![CDATA[hagen]]></dc:creator>
		<pubDate>Wed, 27 Oct 2010 09:36:00 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[functions]]></category>
		<category><![CDATA[label]]></category>
		<category><![CDATA[macros]]></category>
		<category><![CDATA[margin]]></category>
		<category><![CDATA[multiplot]]></category>
		<category><![CDATA[tics]]></category>
		<guid isPermaLink="false">http://gnuplot.kkdu.org/?p=144</guid>

					<description><![CDATA[If we have more than one graph that should be displayed in a figure, the multiplot command is the one to use in Gnuplot. But as we will see this is not a trivial task. Let us consider we have four different functions that should be presented in the same figure as shown in Fig. [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>If we have more than one graph that should be displayed in a figure, the <code>multiplot</code> command is the one to use in Gnuplot. But as we will see this is not a trivial task.<br />
Let us consider we have four different functions that should be presented in the same figure as shown in Fig. 1.</p>
<div class="figure">
        <img decoding="async" src="./../../../figs/multiplot3.png" alt="nice multiplot" width="350"/></p>
<p class="caption">
        <strong>Fig. 1 </strong>A multiplot with reduced axes labeling and nicely arranged graphs (<a href="./../../../code/multiplot3.gnu" type="text/plain">code to produce this figure</a>)
    </p>
</div>
<p>The functions are given by:</p>
<pre class="prettyprint">
<span class="C"># Functions (1/0 means not defined)</span>
<span class="c">a</span> <span class="o">=</span> <span class="n">0.9</span>
<span class="f">f</span>(<span class="v">x</span>) <span class="o">=</span> <span class="f">abs</span>(<span class="v">x</span>)<span class="o">&lt;</span><span class="n">2</span><span class="o">*</span><span class="c">pi</span> <span class="o">?</span> <span class="c">a</span><span class="o">*</span><span class="f">sin</span>(<span class="v">x</span>)           <span class="o">:</span> <span class="n">1</span><span class="o">/</span><span class="n">0</span>
<span class="f">g</span>(<span class="v">x</span>) <span class="o">=</span> <span class="f">abs</span>(<span class="v">x</span>)<span class="o">&lt;</span><span class="n">2</span><span class="o">*</span><span class="c">pi</span> <span class="o">?</span> <span class="c">a</span><span class="o">*</span><span class="f">sin</span>(<span class="v">x</span><span class="o">+</span><span class="c">pi</span><span class="o">/</span><span class="n">2</span>)      <span class="o">:</span> <span class="n">1</span><span class="o">/</span><span class="n">0</span>
<span class="f">h</span>(<span class="v">x</span>) <span class="o">=</span> <span class="f">abs</span>(<span class="v">x</span>)<span class="o">&lt;</span><span class="n">2</span><span class="o">*</span><span class="c">pi</span> <span class="o">?</span> <span class="c">a</span><span class="o">*</span><span class="f">sin</span>(<span class="v">x</span><span class="o">+</span><span class="c">pi</span>)        <span class="o">:</span> <span class="n">1</span><span class="o">/</span><span class="n">0</span>
<span class="f">k</span>(<span class="v">x</span>) <span class="o">=</span> <span class="f">abs</span>(<span class="v">x</span>)<span class="o">&lt;</span><span class="n">2</span><span class="o">*</span><span class="c">pi</span> <span class="o">?</span> <span class="c">a</span><span class="o">*</span><span class="f">sin</span>(<span class="v">x</span><span class="o">+</span><span class="n">3.0</span><span class="o">/</span><span class="n">2</span><span class="o">*</span><span class="c">pi</span>)  <span class="o">:</span> <span class="n">1</span><span class="o">/</span><span class="n">0</span>
</pre>
<p>For an explanation of the used syntax to declare the functions have a look at the <a href="./../../../defining-piecewise-functions/index.html">Defining piecewise functions</a> article.</p>
<p>In a first attempt we just use the <code>multiplot</code> command:</p>
<pre class="prettyprint">
<span class="C">### Start multiplot (2x2 layout)</span>
<span class="k">set</span> multiplot layout <span class="n">2</span>,<span class="n">2</span> rowsfirst
<span class="C"># --- GRAPH a</span>
<span class="k">set</span> label <span class="n">1</span> <span class="s">'a'</span> at graph <span class="n">0.92</span>,<span class="n">0.9</span> font <span class="s">',8'</span>
<span class="k">plot</span> <span class="f">f</span>(<span class="v">x</span>) with lines ls <span class="n">1</span>
<span class="C"># --- GRAPH b</span>
<span class="k">set</span> label <span class="n">1</span> <span class="s">'b'</span> at graph <span class="n">0.92</span>,<span class="n">0.9</span> font <span class="s">',8'</span>
<span class="k">plot</span> <span class="f">g</span>(<span class="v">x</span>) with lines ls <span class="n">1</span>
<span class="C"># --- GRAPH c</span>
<span class="k">set</span> label <span class="n">1</span> <span class="s">'c'</span> at graph <span class="n">0.92</span>,<span class="n">0.9</span> font <span class="s">',8'</span>
<span class="k">plot</span> <span class="f">h</span>(<span class="v">x</span>) with lines ls <span class="n">1</span>
<span class="C"># --- GRAPH d</span>
<span class="k">set</span> label <span class="n">1</span> <span class="s">'d'</span> at graph <span class="n">0.92</span>,<span class="n">0.9</span> font <span class="s">',8'</span>
<span class="k">plot</span> <span class="f">k</span>(<span class="v">x</span>) with lines ls <span class="n">1</span>
<span class="k">unset</span> multiplot
<span class="C">### End multiplot</span>
</pre>
<p>We also added a label to every graph in order to identify them easily in the figure. Note that we overwrite the label 1 for every graph. If we don&#8217;t do that, then on the last graph all four labels will be present. Using this simple approach we will get Fig. 2. As you can see this is not an ideal case to use the space in the figure. The xtics and the ytics are just the same in every graph and are not needed to be displayed on every graph.</p>
<div class="figure">
        <img decoding="async" src="./../../../figs/multiplot1.png" alt="simple multiplot" width="350"/></p>
<p class="caption">
        <strong>Fig. 2 </strong>A straightforward use of the multiplot command to plot four different functions (<a href="./../../../code/multiplot1.gnu" type="text/plain">code to produce this figure</a>)
    </p>
</div>
<p>But before we fix this we will introduce the use of macros in order to shorten the code a lot. As you can see in the code block above, the set label command contains the same position for every graph. We can shorten this by:</p>
<pre class="prettyprint">
<span class="k">set</span> macros
<span class="C"># Placement of the a,b,c,d labels in the graphs</span>
<span class="v">POS</span> <span class="o">=</span> <span class="s">"at graph 0.92,0.9 font ',8'"</span>
[...]
<span class="k">set</span> label <span class="n">1</span> <span class="s">'a'</span> <span class="v">@POS</span>
<span class="k">plot</span> <span class="f">f</span>(<span class="v">x</span>) with lines ls <span class="n">1</span>
</pre>
<p>and so on for the other graphs.</p>
<p>But the macros are not only useful for the different labels, but also for the other settings of the multiplot.<br />
First we want to remove the x/y-tics and labels, where they are not necessary. Here it is the same as with the label settings. Every graph uses the settings from the graph before, if we didn&#8217;t change these settings. In order to remove the xtics at a given graph we have to tell this explicitly. Therefore we define macros for the two cases label+tics vs. nolabel+notics:</p>
<pre class="prettyprint">
<span class="C"># x- and ytics for each row resp. column</span>
<span class="v">NOXTICS</span> <span class="o">=</span> <span class="s">"set xtics ('' -2*pi,'' -pi,'' 0,'' pi,'' 2*pi); \
          unset xlabel"</span>
<span class="v">XTICS</span> <span class="o">=</span> <span class="s">"set xtics ('-2&pi;' -2*pi,'-&pi;' -pi,'0' 0,'&pi;' pi,'2&pi;' 2*pi);\
          set xlabel 'x'"</span>
<span class="v">NOYTICS</span> <span class="o">=</span> <span class="s">"set format y ''; unset ylabel"</span>
<span class="v">YTICS</span> <span class="o">=</span> <span class="s">"set format y '%.0f'; set ylabel 'y'"</span>
</pre>
<p>These will then be used in the plotting section:</p>
<pre class="prettyprint">
<span class="C"># --- GRAPH a</span>
<span class="v">@NOXTICS</span>; <span class="v">@YTICS</span>
[...]
<span class="C"># --- GRAPH b</span>
<span class="v">@NOXTICS</span>; <span class="v">@NOYTICS</span>
[...]
<span class="C"># --- GRAPH c</span>
<span class="v">@XTICS</span>; <span class="v">@YTICS</span>
[...]
<span class="C"># --- GRAPH d</span>
<span class="v">@XTICS</span>; <span class="v">@NOYTICS</span>
</pre>
<p>Applying the axes settings will result in Fig. 3. </p>
<div class="figure">
        <img decoding="async" src="./../../../figs/multiplot2.png" alt="multiplot" width="350"/></p>
<p class="caption">
        <strong>Fig. 3 </strong>A multiplot with reduced axes labeling (<a href="./../../../code/multiplot2.gnu" type="text/plain">code to produce this figure</a>)
    </p>
</div>
<p>Now the label etc. on the axes are done in a nice way, but the sizes and the spaces between the individual graphs are very bad. This comes from the fact that Gnuplot calculates the size of a graph depending on the presence of tics and labels. In order to have graphs with the same size and align them without spaces between them we have to set the margins of the individual graphs manually. </p>
<pre class="prettyprint">
<span class="C"># Margins for each row resp. column</span>
<span class="v">TMARGIN</span> <span class="o">=</span> <span class="s">"set tmargin at screen 0.90; set bmargin at screen 0.55"</span>
<span class="v">BMARGIN</span> <span class="o">=</span> <span class="s">"set tmargin at screen 0.55; set bmargin at screen 0.20"</span>
<span class="v">LMARGIN</span> <span class="o">=</span> <span class="s">"set lmargin at screen 0.15; set rmargin at screen 0.55"</span>
<span class="v">RMARGIN</span> <span class="o">=</span> <span class="s">"set lmargin at screen 0.55; set rmargin at screen 0.95"</span>
</pre>
<p>The trick is that we use the <code>at screen</code> command to arrange the margins absolutely in the figure. As you can see the bottom margin of the two figures in the top is placed at <code>0.55</code>, the same value the top margin of the two lower graphs start.<br />
These margins are then added in the same way to the multiplot command as the label settings and we get:</p>
<pre class="prettyprint">
<span class="C"># --- GRAPH a</span>
<span class="v">@TMARGIN</span>; <span class="v">@LMARGIN</span>
[...]
<span class="C"># --- GRAPH b</span>
<span class="v">@TMARGIN</span>; <span class="v">@RMARGIN</span>
[...]
<span class="C"># --- GRAPH c</span>
<span class="v">@BMARGIN</span>; <span class="v">@LMARGIN</span>
[...]
<span class="C"># --- GRAPH d</span>
<span class="v">@BMARGIN</span>; <span class="v">@RMARGIN</span>
</pre>
<p>Having done all this we will finally get our desired figure which is shown in Fig. 1.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../multiplot-placing-graphs-next-to-each-other/feed/index.html</wfw:commentRss>
			<slash:comments>11</slash:comments>
		
		
			</item>
	</channel>
</rss>
