<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>vectors &#8211; Gnuplotting</title>
	<atom:link href="./index.html?simply_static_page=2104" rel="self" type="application/rss+xml" />
	<link>./../../../index.html</link>
	<description>Create scientific plots using gnuplot</description>
	<lastBuildDate>Mon, 02 Jan 2023 18:38:22 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1.1</generator>
	<item>
		<title>Ease your plotting with config-snippets</title>
		<link>./../../../ease-your-plotting-with-config-snippets/index.html</link>
					<comments>./../../../ease-your-plotting-with-config-snippets/index.html#comments</comments>
		
		<dc:creator><![CDATA[hagen]]></dc:creator>
		<pubDate>Mon, 02 Mar 2015 15:28:51 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[arrow]]></category>
		<category><![CDATA[border]]></category>
		<category><![CDATA[configuration]]></category>
		<category><![CDATA[grid]]></category>
		<category><![CDATA[palette]]></category>
		<category><![CDATA[vectors]]></category>
		<guid isPermaLink="false">./../../../index.html?p=1994</guid>

					<description><![CDATA[If you are a regular gnuplot user you most probably want to reuse some common settings. I normally avoid it on this blog to have easy scripts that run as standalone files, but during my work I use a lot of small config files. Fig. 1 Bessel functions from order zero up to six plotted [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>If you are a regular gnuplot user you most probably want to reuse some common settings. I normally avoid it on this blog to have easy scripts that run as standalone files, but during my work I use a lot of small config files.</p>
<div class="figure">
    <img decoding="async" src="./../../../figs/config-snippets1.png" alt="Bessel functions"/></p>
<p class="caption">
        <strong>Fig. 1 </strong>Bessel functions from order zero up to six plotted with the dark2 line colors. (<a href="./../../../code/config-snippets1.gnu" type="text/plain">code to produce this figure</a>, <a href="./../../../data/dark2.pal">dark2.pal</a>, <a href="./../../../code/xyborder.cfg">xyborder.cfg</a>, <a href="./../../../code/grid.cfg">grid.cfg</a>, <a href="./../../../code/mathematics.cfg">mathematics.cfg</a>)
    </p>
</div>
<p>Let us start with the Bessel function example from the <a href="./../../../matlab-colorbar-parula-with-gnuplot/index.html">last blog entry</a>. As you can see in Fig. 1, it is a 2D plot, including axes, a grid, line colors, and definitions of higher order Bessel functions. All of those could be easily stored in small config files and reused in other plots.<br />
As an example I will start with the axes. Here, I have four different config files, called <code>xyborder.cfg</code>, <code>xborder</code>, <code>yborder.cfg</code>, <code>noborder.cfg</code>, which do exactly what their names would suggest. Here are the first and last file:</p>
<pre class="prettyprint">
# xyborder.cfg
set style line 101 lc rgb '#808080' lt 1 lw 1
set border 3 front ls 101
set tics nomirror out scale 0.75
set format '%g'
</pre>
<pre class="prettyprint">
# noborder.cfg
set border 0
set style line 101 lc rgb '#808080' lt 1 lw 1
unset xlabel
unset ylabel
set format x ''
set format y ''
set tics scale 0
</pre>
<p>In the main plotting file I then just have to load the setting I like to have and I&#8217;m done. The same can be done for adding a grid, the right line color definitions and the extra Bessel functions leading to the following excerpt from the main plotting file:</p>
<pre class="prettyprint">
# set path of config snippets
set loadpath './config'
# load config snippets
load 'dark2.pal'
load 'xyborder.cfg'
load 'grid.cfg'
load 'mathematics.cfg'
</pre>
<p>The <code>set loadpath</code> command tells gnuplot the directory where it can find all the configuration snippets. If you want to see an overview, look at my <a href="https://github.com/Gnuplotting/gnuplot-configs">gnuplot configuration snippets</a> and at the <a href="https://github.com/Gnuplotting/gnuplot-palettes">collection of palettes and line colors</a>.</p>
<div class="figure">
    <img decoding="async" src="./../../../figs/config-snippets2.png" alt="Vector Field"/></p>
<p class="caption">
        <strong>Fig. 2 </strong> (<a href="./../../../code/config-snippets2.gnu" type="text/plain">code to produce this figure</a>, <a href="./../../../data/moreland.pal">moreland.pal</a>, <a href="./../../../code/noborder.cfg">noborder.cfg</a>, <a href="./../../../code/arrows.cfg">arrows.cfg</a>)
    </p>
</div>
<p>If you want to include more complicated settings, you have to use the <code>macro</code> setting of gnuplot. Fig. 2 is a reproduction of an <a href="./../../../vector-field-from-function/index.html">earlier entry</a> plotting a vector field with arrows. It included an lenghty definition of how to plot these arrows. If you want to do it several time and define the arrows in the same way every time you should also put it into a config file, this time as a variable (macro). In our example it looks like</p>
<pre class="prettyprint">
color_arrows = 'u ($1-dx($1,$2)/2.0):($2-dy($1,$2)/2.0):(dx($1,$2)):(dy($1,$2)):\
(v($1,$2)) with vectors head size 0.08,20,60 filled lc palette'
</pre>
<p>In the main file the only thing we have then to do is</p>
<pre class="prettyprint">
set macros
load 'noborder.cfg'
load 'moreland.pal'
load 'arrows.cfg'

# [...] 

plot '++' @color_arrows
</pre>
<p>Important is the first line that enables the use of macros in gnuplot which is disabled by default.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../ease-your-plotting-with-config-snippets/feed/index.html</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>Vector field from function</title>
		<link>./../../../vector-field-from-function/index.html</link>
					<comments>./../../../vector-field-from-function/index.html#comments</comments>
		
		<dc:creator><![CDATA[hagen]]></dc:creator>
		<pubDate>Sat, 01 Dec 2012 22:25:12 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[++]]></category>
		<category><![CDATA[functions]]></category>
		<category><![CDATA[isosamples]]></category>
		<category><![CDATA[palette]]></category>
		<category><![CDATA[samples]]></category>
		<category><![CDATA[special-filenames]]></category>
		<category><![CDATA[vectors]]></category>
		<guid isPermaLink="false">./../../../index.html?p=1515</guid>

					<description><![CDATA[In an earlier entry we created a vector field from measured data. Now we will visualize functions with the vector plotting style. As functions we have two 1/r potentials which define the amplitude of the vectors, as can be seen in Fig. 1. It is often better to indicate the amplitude by a color instead [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>In an earlier entry we <a href="./../../../vector-field-from-data-file/index.html">created a vector field from measured data</a>. Now we will visualize functions with the <code>vector</code> plotting style. As functions we have two 1/r potentials which define the amplitude of the vectors, as can be seen in Fig. 1. It is often better to indicate the amplitude by a color instead of by the length of the single vectors, especially if there are big changes. For the exact functions have a look into the <a href="./../../../code/vector_fields2.gnu">corresponding file</a>.</p>
<div class="figure">
    <img decoding="async" src="./../../../figs/vector_fields2.png" alt="Vector field showing two sources"/></p>
<p class="caption">
        <strong>Fig. 1 </strong>Vector field of two sources with the opposite charge. The color indicates the amplitude. (<a href="./../../../code/vector_fields2.gnu" type="text/plain">code to produce this figure</a>)
    </p>
</div>
<p>By analogy to the <a href="./../../../vector-field-from-data-file/index.html">data vector field</a> we have again a dx, and dy function for the length of the vectors.</p>
<pre class="prettyprint">
dx(x,y) = scaling*ex(x,y)/enorm(x,y)
dy(x,y) = scaling*ey(x,y)/enorm(x,y)
</pre>
<p>Now we need a trick, because we have to fill the <code>u 1:2:3:4</code> for the vector style with our function data. The four columns are then x,y,dx,dy of the vectors, where dx, dy are the lengths of the vector in x and y direction. Here the special filename <code>++</code> is a big help. It gives us x and y points as a first and second column, which we could address by <code>$1</code> and <code>$2</code>. The number of points for the two axes are handled by the <code>samples</code> and <code>isosamples</code> command.</p>
<pre class="prettyprint">
set samples 17    # x-axis
set isosamples 15 # y-axis
plot '++' u ($1-dx($1,$2)/2.0):($2-dy($1,$2)/2.0):\
    (dx($1,$2)):(dy($1,$2)):(v($1,$2)) \
    with vectors head size 0.08,20,60 filled lc palette
</pre>
<p>To place the vector at the center of the single x, y points, we move the starting point of the vectors to x-dx/2, y-dy/2.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../vector-field-from-function/feed/index.html</wfw:commentRss>
			<slash:comments>7</slash:comments>
		
		
			</item>
		<item>
		<title>Vector field from data file</title>
		<link>./../../../vector-field-from-data-file/index.html</link>
					<comments>./../../../vector-field-from-data-file/index.html#comments</comments>
		
		<dc:creator><![CDATA[hagen]]></dc:creator>
		<pubDate>Wed, 17 Oct 2012 13:51:45 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[data]]></category>
		<category><![CDATA[head]]></category>
		<category><![CDATA[linecolor]]></category>
		<category><![CDATA[palette]]></category>
		<category><![CDATA[vectors]]></category>
		<guid isPermaLink="false">http://gnuplot.kkdu.org/?p=38</guid>

					<description><![CDATA[Some data could be nicely visualized by representing them as arrows. For example, assume that we have done an experiment where we played something to a subject through three loudspeakers and the subject should name the direction where he or she perceived it. In Fig. 1 we show the named direction by the direction of [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some data could be nicely visualized by representing them as arrows. For example, assume that we have done an experiment where we played something to a subject through three loudspeakers and the subject should name the direction where he or she perceived it. In Fig. 1 we show the named direction by the direction of the arrows. The color of the arrow indicates the deviation from the desired direction. A white and not visible arrow means no deviation and a dark red one a deviation of 40° or more.</p>
<div class="figure">
    <img decoding="async" src="./../../../figs/vector_fields1.png" alt="Vector field showing localization data"/></p>
<p class="caption">
        <strong>Fig. 1 </strong>Vector field showing localization results. The arrows are pointing towards the direction the subject had named. The color indicates the deviation from the desired direction. (<a href="./../../../code/vector_fields1.gnu" type="text/plain">code to produce this figure</a>, <a href="./../../../code/set_loudspeakers.gnu">set_loudspeakers.gnu</a>, <a href="./../../../data/localization_data.txt">data</a>)
    </p>
</div>
<p>In gnuplot the <code>with vectors</code> command enables the arrows in the plot. It requires four parameters, x, y, dx, dy, where dx and dy controls the endpoint of the arrow as offset values to x,y. In our example the direction is stored as an angle, hence the following functions do the conversion to dx,dy. 0.1 defines the length of the arrows.</p>
<pre class="prettyprint">
xf(phi) = 0.1*cos(phi/180.0*pi+pi/2)
yf(phi) = 0.1*sin(phi/180.0*pi+pi/2)
</pre>
<p>An optional fifth parameter controls the color of the vector together with the <code>lc palette</code> setting. The arrows start at x-dx,y-dy and point to x+dx,y+dy.</p>
<pre class="prettyprint">
plot 'localization_data.txt' \
    u ($1-xf($3)):($2-yf($3)):(2*xf($3)):(2*yf($3)):4 \
    with vectors head size 0.1,20,60 filled lc palette
</pre>
]]></content:encoded>
					
					<wfw:commentRss>./../../../vector-field-from-data-file/feed/index.html</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
	</channel>
</rss>
